from flask import Flask, request, jsonify
from pymongo import MongoClient, errors
from bson import ObjectId
from pydantic import BaseModel, ValidationError, Field
from typing import Optional,List, Dict
import os

app = Flask(__name__)

# MongoDB setup
connection_string = "mongodb://localhost:27017/"
mongo = MongoClient(connection_string)
db = "mydatabase"
mycollection = "mycollection"

# Define Pydantic model
class ItemModel(BaseModel):
    name: str
    value: str
    age: Optional[int] = Field( ge=0, le=100)  # Optional field with constraints
   
acceptable_keys = {"name", "value", "age"}
# Create route
@app.route('/insert', methods=['POST'])
def insert():
    try:
        data = request.json
        if not data:
            return jsonify({"msg": "No data provided"}), 400
        # Check for unexpected keys
        unexpected_keys = [key for key in data.keys() if key not in acceptable_keys]
        if unexpected_keys:
            return jsonify({"msg": f"Unexpected keys found: {', '.join(unexpected_keys)}. Please check your input."}), 400
        # Validate the incoming request data using the Pydantic model
        try:
            item = ItemModel(**data)
        except ValidationError as e:
            return jsonify({"msg": "Validation error", "errors": e.errors()}), 400

        result = mongo[db][mycollection].insert_one(item.dict())
        return jsonify({"msg": "Data created successfully", "id": str(result.inserted_id)}), 201

    except errors.PyMongoError as e:
        return jsonify({"msg": "Database error occurred", "error": str(e)}), 500
    except Exception as e:
        return jsonify({"msg": "An unexpected error occurred", "error": str(e)}), 500
#read
@app.route('/read', methods=['GET'])
def read():
    try:
        # Query parameters for filtering (optional)
        name = request.args.get('name')
        value = request.args.get('value')
        age = request.args.get('age')

        query = {}
        if name:
            query['name'] = name
        if value:
            query['value'] = value
        if age:
            query['age'] = int(age)
        items = list(mongo[db][mycollection].find(query))
        for item in items:
            item['_id'] = str(item['_id'])  # Convert ObjectId to string
        return jsonify(items), 200
    except errors.PyMongoError as e:
        return jsonify({"msg": "Database error occurred", "error": str(e)}), 500
    except Exception as e:
        return jsonify({"msg": "An unexpected error occurred", "error": str(e)}), 500

#update        
@app.route('/update/<item_id>', methods=['PATCH'])
def update_item(item_id):
    try:
        data = request.json
        if not data:
            return jsonify({"msg": "No data provided"}), 400

        unexpected_keys = [key for key in data.keys() if key not in acceptable_keys]
        if unexpected_keys:
            return jsonify({"msg": f"Unexpected keys found: {', '.join(unexpected_keys)}. Please check your input."}), 400

        # Validate the incoming request data using the Pydantic model
        try:
            item = ItemModel(**data)
        except ValidationError as e:
            return jsonify({"msg": "Validation error", "errors": e.errors()}), 400

        # Update the document in MongoDB
        update_result = mongo[db][mycollection].update_one(
            {"_id": ObjectId(item_id)},
            {"$set": item.dict(exclude_unset=True)}
        )

        if update_result.matched_count == 0:
            return jsonify({"msg": "No document found with the provided ID"}), 404

        return jsonify({"msg": "Data updated successfully"}), 200
    
    except errors.InvalidId:
        return jsonify({"msg": "Invalid ID format"}), 400
    except errors.PyMongoError as o:
        return jsonify({"msg": "Database error occurred", "error": str(e)}), 500
    except Exception as o:
        return jsonify({"msg": "An unexpected error occurred", "error": str(e)}), 500

#delete
@app.route('/delete/<item_id>', methods=['DELETE'])
def delete_item(item_id):
    try:
        # Attempt to delete the document with the specified ID
        delete_result = mongo[db][mycollection].delete_one({"_id": ObjectId(item_id)})

        # Check if any document was deleted
        if delete_result.deleted_count == 0:
            return jsonify({"msg": "No document found with the provided ID"}), 404

        return jsonify({"msg": "Data deleted successfully"}), 200
    
    except errors.InvalidId:
        return jsonify({"msg": "Invalid ID format"}), 400
    except errors.PyMongoError as e:
        return jsonify({"msg": "Database error occurred", "error": str(e)}), 500
    except Exception as e:
        return jsonify({"msg": "An unexpected error occurred", "error": str(e)}), 500
if __name__ == '__main__':
    app.run(debug=True)








